apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        def VERSION_NAME = this.properties.VERSION_NAME
        if(!VERSION_NAME){
            VERSION_NAME = appVersionName
        }
        applicationId "com.hank.myapplication"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode appVersionCode
        versionName VERSION_NAME
        aaptOptions.cruncherEnabled = false
        aaptOptions.useNewCruncher = false
    }
    signingConfigs{
        def STORE_FILE = this.properties.STORE_FILE
        def STORE_PASSWORD = this.properties.STORE_PASSWORD
        def KEY_ALIAS = this.properties.KEY_ALIAS
        def KEY_PASSWORD = this.properties.KEY_PASSWORD
        if(!STORE_FILE || !STORE_PASSWORD || !KEY_ALIAS || !KEY_PASSWORD){
            STORE_FILE = "pdmi_debug.jks"
            STORE_PASSWORD = "123456"
            KEY_ALIAS = "pdmi"
            KEY_PASSWORD = "123456"
        }
        release{
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
            v2SigningEnabled false
        }
        debug{
            storeFile file("C:/Users/Hank/.android/pdmi_debug.jks")
            storePassword "123456"
            keyAlias "pdmi"
            keyPassword "123456"
            v2SigningEnabled false
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug{
            signingConfig signingConfigs.debug
        }
    }

    productFlavors{
        hank{
            applicationIdSuffix '.hank'
            resValue "string", "AppName", "HankFlavors"
        }
        huhb{
            applicationIdSuffix '.huhb'
            resValue "string", "AppName", "HuhbFlavors"

        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            println "System Property SYS_TEST is ${System.properties.SYS_TEST}"
            println "Project Property TEST is ${this.properties.PRO_TEST}"
            //输出文件夹
            def outDirectory
            if("true".equals(this.properties.IS_JENKINS)){
                outDirectory = this.properties.JENKINS_OUTPUT_DIR+this.properties.BUILD_TIME
            }
            else{
                outDirectory = output.outputFile.parent
            }
            def fileName = output.outputFile.name;
            fileName = fileName.replace("app", "MyApplication-${variant.versionName}-${variant.versionCode}")
            output.outputFile = new File(outDirectory, fileName)
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}
repositories {
    mavenCentral()
}
